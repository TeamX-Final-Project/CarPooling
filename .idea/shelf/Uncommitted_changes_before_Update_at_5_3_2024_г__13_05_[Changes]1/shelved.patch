Index: CarPooling/src/main/java/org/example/carpooling/controllers/TravelRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.carpooling.controllers;\r\n\r\nimport jakarta.validation.Valid;\r\nimport org.example.carpooling.exceptions.AuthorizationException;\r\nimport org.example.carpooling.exceptions.BlockedUserException;\r\nimport org.example.carpooling.exceptions.EntityNotFoundException;\r\nimport org.example.carpooling.helpers.TravelMapper;\r\nimport org.example.carpooling.models.Travel;\r\nimport org.example.carpooling.models.TravelFilterOptions;\r\nimport org.example.carpooling.models.dto.TravelDto;\r\nimport org.example.carpooling.services.contracts.TravelService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.server.ResponseStatusException;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/travels\")\r\npublic class TravelRestController {\r\n\r\n    private final TravelService travelService;\r\n    private final TravelMapper travelMapper;\r\n\r\n    @Autowired\r\n    public TravelRestController(TravelService travelService, TravelMapper travelMapper) {\r\n        this.travelService = travelService;\r\n        this.travelMapper = travelMapper;\r\n    }\r\n\r\n    @GetMapping\r\n    public List<Travel> getAllTravels(@RequestParam(required = false) String title,\r\n                                      @RequestParam(required = false) String startPoint,\r\n                                      @RequestParam(required = false) String endPoint,\r\n                                      @RequestParam(required = false) String createdBy,\r\n                                      @RequestParam(required = false) String sortBy,\r\n                                      @RequestParam(required = false) String orderBy) {\r\n        try {\r\n            TravelFilterOptions travelFilterOptions = new TravelFilterOptions(\r\n                    title,\r\n                    startPoint,\r\n                    endPoint,\r\n                    createdBy,\r\n                    sortBy,\r\n                    orderBy);\r\n            return travelService.getAllTravels(travelFilterOptions);\r\n        } catch (EntityNotFoundException e) {\r\n            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Travel getTravelById(@RequestHeader HttpHeaders headers, @PathVariable int id) {\r\n        try {\r\n            //TODO wait for the User class implementation for the logic to authenticate the user before searching for travel by id\r\n            User user = authenticationHelper.tryGetCurrentUser(headers);\r\n            return travelService.getById(id);\r\n        } catch (EntityNotFoundException e) {\r\n            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());\r\n        } catch (AuthorizationException e) {\r\n            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PostMapping\r\n    public Travel createTravel(@RequestHeader HttpHeaders headers, @Valid @RequestBody TravelDto travelDto) {\r\n        try {\r\n            //TODO wait for the User class implementation for the logic to authenticate the user before creating a new travel\r\n            User creator = authenticationHelper.tryGetCurrentUser(headers);\r\n            Travel newTravel = travelMapper.fromDto(travelDto);\r\n            return travelService.create(newTravel, creator);\r\n        } catch (AuthorizationException | BlockedUserException e) {\r\n            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public Travel updateTravel(@RequestHeader HttpHeaders headers,\r\n                               @PathVariable int id,\r\n                               @Valid @RequestBody TravelDto travelDto) {\r\n        try {\r\n            User userModifier = authenticationHelper.tryGetCurrentUser(headers);\r\n            Travel travelToUpdate = travelMapper.fromDto(id, travelDto);\r\n            return travelService.update(userModifier, travelToUpdate);\r\n        } catch (AuthorizationException | BlockedUserException e) {\r\n            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());\r\n        } catch (EntityNotFoundException e) {\r\n            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/delete:{id}\")\r\n    public Travel deleteTravel(@RequestHeader HttpHeaders headers,\r\n                               @PathVariable int id) {\r\n        try {\r\n            User userModifier = authenticationHelper.tryGetCurrentUser(headers);\r\n            return travelService.delete(id, userModifier);\r\n        } catch (AuthorizationException | BlockedUserException e) {\r\n            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, e.getMessage());\r\n        } catch (EntityNotFoundException e) {\r\n            throw new ResponseStatusException(HttpStatus.NOT_FOUND, e.getMessage());\r\n        }\r\n\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CarPooling/src/main/java/org/example/carpooling/controllers/TravelRestController.java b/CarPooling/src/main/java/org/example/carpooling/controllers/TravelRestController.java
--- a/CarPooling/src/main/java/org/example/carpooling/controllers/TravelRestController.java	
+++ b/CarPooling/src/main/java/org/example/carpooling/controllers/TravelRestController.java	
@@ -4,9 +4,11 @@
 import org.example.carpooling.exceptions.AuthorizationException;
 import org.example.carpooling.exceptions.BlockedUserException;
 import org.example.carpooling.exceptions.EntityNotFoundException;
+import org.example.carpooling.helpers.AuthenticationHelper;
 import org.example.carpooling.helpers.TravelMapper;
 import org.example.carpooling.models.Travel;
 import org.example.carpooling.models.TravelFilterOptions;
+import org.example.carpooling.models.User;
 import org.example.carpooling.models.dto.TravelDto;
 import org.example.carpooling.services.contracts.TravelService;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -24,10 +26,13 @@
     private final TravelService travelService;
     private final TravelMapper travelMapper;
 
+    private final AuthenticationHelper authenticationHelper;
+
     @Autowired
-    public TravelRestController(TravelService travelService, TravelMapper travelMapper) {
+    public TravelRestController(TravelService travelService, TravelMapper travelMapper, AuthenticationHelper authenticationHelper) {
         this.travelService = travelService;
         this.travelMapper = travelMapper;
+        this.authenticationHelper = authenticationHelper;
     }
 
     @GetMapping
Index: CarPooling/src/main/java/org/example/carpooling/services/TravelServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.carpooling.services;\r\n\r\nimport org.example.carpooling.exceptions.AuthorizationException;\r\nimport org.example.carpooling.models.Travel;\r\nimport org.example.carpooling.models.TravelFilterOptions;\r\nimport org.example.carpooling.repositories.contracts.TravelRepository;\r\nimport org.example.carpooling.services.contracts.TravelService;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class TravelServiceImpl implements TravelService {\r\n    public static final String YOU_ARE_NOT_THE_CREATOR_OF_THE_TRAVEL_ERROR = \"You are not the creator of the travel\";\r\n    private final TravelRepository travelRepository;\r\n\r\n    @Autowired\r\n    public TravelServiceImpl(TravelRepository travelRepository) {\r\n        this.travelRepository = travelRepository;\r\n    }\r\n\r\n    @Override\r\n    public List<Travel> getAllTravels(TravelFilterOptions travelFilterOptions) {\r\n        return travelRepository.getAllTravels(travelFilterOptions);\r\n    }\r\n\r\n    @Override\r\n    public Travel getById(int id) {\r\n        //TODO create the logic for the authorization to search travel by ID\r\n        return travelRepository.getById(id);\r\n    }\r\n\r\n    @Override\r\n    public Travel create(Travel travel, User creator) {\r\n        //        TODO create the logic for the authorization and check if the user is blocked before creating new travel\r\n\r\n        return travelRepository.create(travel);\r\n    }\r\n\r\n    @Override\r\n    public Travel update(User userModifier, Travel travelToUpdate) {\r\n        //TODO double check the getByID since once you take the travelToUpdate here\r\n        // then again is used getById in checkModifyPermission and one more time in the travelMapper.fromDTO\r\n        Travel travel = getById(travelToUpdate.getTravelId());\r\n        checkModifyPermission(userModifier, travelToUpdate);\r\n        return travelRepository.update(travelToUpdate);\r\n    }\r\n\r\n    @Override\r\n    public Travel delete(int id, User userModifier) {\r\n        //TODO double check the getByID since once you take the travelToDelete here\r\n        // then again is used getById in checkModifyPermission\r\n        Travel travelToDelete = getById(id);\r\n        checkModifyPermission(userModifier, travelToDelete);\r\n        travelToDelete.setDeleted(true);\r\n        return travelRepository.delete(travelToDelete);\r\n    }\r\n\r\n    @Override\r\n    public long getTravelsCount() {\r\n        return 0;\r\n    }\r\n\r\n    private void checkModifyPermission(User userModifier, Travel travelToUpdate) {\r\n\r\n        if (userModifier.getId() != travelToUpdate.getUserId()) {\r\n            throw new AuthorizationException(YOU_ARE_NOT_THE_CREATOR_OF_THE_TRAVEL_ERROR);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CarPooling/src/main/java/org/example/carpooling/services/TravelServiceImpl.java b/CarPooling/src/main/java/org/example/carpooling/services/TravelServiceImpl.java
--- a/CarPooling/src/main/java/org/example/carpooling/services/TravelServiceImpl.java	
+++ b/CarPooling/src/main/java/org/example/carpooling/services/TravelServiceImpl.java	
@@ -3,6 +3,7 @@
 import org.example.carpooling.exceptions.AuthorizationException;
 import org.example.carpooling.models.Travel;
 import org.example.carpooling.models.TravelFilterOptions;
+import org.example.carpooling.models.User;
 import org.example.carpooling.repositories.contracts.TravelRepository;
 import org.example.carpooling.services.contracts.TravelService;
 import org.springframework.beans.factory.annotation.Autowired;
Index: CarPooling/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'java'\r\n    id 'org.springframework.boot' version '3.2.2'\r\n    id 'io.spring.dependency-management' version '1.1.4'\r\n}\r\n\r\ngroup = 'org.example'\r\nversion = '0.0.1-SNAPSHOT'\r\n\r\njava {\r\n    sourceCompatibility = '17'\r\n}\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\r\n    implementation 'org.springframework.boot:spring-boot-starter-validation'\r\n    implementation 'org.springframework.boot:spring-boot-starter-web'\r\n    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.3.2'\r\n    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'\r\n\r\n    developmentOnly 'org.springframework.boot:spring-boot-devtools'\r\n    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'\r\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\r\n}\r\n\r\ntasks.named('test') {\r\n    useJUnitPlatform()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CarPooling/build.gradle b/CarPooling/build.gradle
--- a/CarPooling/build.gradle	
+++ b/CarPooling/build.gradle	
@@ -1,7 +1,7 @@
 plugins {
     id 'java'
-    id 'org.springframework.boot' version '3.2.2'
-    id 'io.spring.dependency-management' version '1.1.4'
+    id 'org.springframework.boot' version '3.1.1'
+    id 'io.spring.dependency-management' version '1.1.0'
 }
 
 group = 'org.example'
Index: CarPooling/db/create.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>drop database if exists carpoolingx;\r\n\r\ncreate database carpoolingx;\r\nuse carpoolingx;\r\n\r\ncreate table users\r\n(\r\n    user_id      int auto_increment\r\n        primary key,\r\n    username     varchar(20) not null,\r\n    password     varchar(20) not null,\r\n    first_name   varchar(20) not null,\r\n    last_name    varchar(20) not null,\r\n    email        varchar(50) not null,\r\n    phone_number varchar(20) not null,\r\n    is_deleted   tinyint(1)  not null,\r\n    is_blocked   tinyint(1)  not null,\r\n    is_admin     tinyint(1)  not null,\r\n    constraint users_pk2\r\n        unique (username),\r\n    constraint users_pk3\r\n        unique (email),\r\n    constraint users_pk4\r\n        unique (phone_number)\r\n);\r\n\r\ncreate table travels\r\n(\r\n    travel_id      int auto_increment\r\n        primary key,\r\n    title          varchar(50) not null,\r\n    start_point    varchar(20) not null,\r\n    end_point      varchar(20) not null,\r\n    departure_time timestamp   not null,\r\n    free_spots     int         not null,\r\n    is_deleted     tinyint(1)  not null,\r\n    user_id        int         not null,\r\n    constraint travels_users_user_id_fk\r\n        foreign key (user_id) references users (user_id)\r\n);\r\n\r\ncreate table comments\r\n(\r\n    comment_id     int auto_increment\r\n        primary key,\r\n    content        varchar(20) not null,\r\n    is_allowed     tinyint(1)  not null,\r\n    is_not_allowed tinyint(1)  not null,\r\n    travel_id      int         not null,\r\n    constraint comments_travels_travel_id_fk\r\n        foreign key (travel_id) references travels (travel_id)\r\n);
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CarPooling/db/create.sql b/CarPooling/db/create.sql
--- a/CarPooling/db/create.sql	
+++ b/CarPooling/db/create.sql	
@@ -3,6 +3,20 @@
 create database carpoolingx;
 use carpoolingx;
 
+create table cities
+(
+    id   int auto_increment
+        primary key,
+    name varchar(50) not null
+);
+
+create table travel_status
+(
+    id            int auto_increment
+        primary key,
+    travel_status int not null
+);
+
 create table users
 (
     user_id      int auto_increment
@@ -13,9 +27,6 @@
     last_name    varchar(20) not null,
     email        varchar(50) not null,
     phone_number varchar(20) not null,
-    is_deleted   tinyint(1)  not null,
-    is_blocked   tinyint(1)  not null,
-    is_admin     tinyint(1)  not null,
     constraint users_pk2
         unique (username),
     constraint users_pk3
@@ -24,29 +35,107 @@
         unique (phone_number)
 );
 
+create table feedbacks
+(
+    id                       int auto_increment
+        primary key,
+    rating                   int     null,
+    from_user_id             int     null,
+    to_user_id               int     null,
+    from_driver_to_passenger tinyint null,
+    constraint feedbacks_users_user_id_fk
+        foreign key (from_user_id) references users (user_id),
+    constraint feedbacks_users_user_id_fk2
+        foreign key (to_user_id) references users (user_id)
+);
+
+create table comments_text
+(
+    id          int auto_increment
+        primary key,
+    text        varchar(2000) not null,
+    feedback_id int           not null,
+    is_deleted  tinyint       not null,
+    constraint comments_text_feedbacks_id_fk
+        foreign key (feedback_id) references feedbacks (id)
+);
+
+create table notification
+(
+    id                int auto_increment
+        primary key,
+    notification_text varchar(2000) not null,
+    user_id           int           not null,
+    constraint notification___fk
+        foreign key (user_id) references users (user_id)
+);
+
 create table travels
 (
-    travel_id      int auto_increment
+    travel_id        int auto_increment
         primary key,
-    title          varchar(50) not null,
-    start_point    varchar(20) not null,
-    end_point      varchar(20) not null,
-    departure_time timestamp   not null,
-    free_spots     int         not null,
-    is_deleted     tinyint(1)  not null,
-    user_id        int         not null,
+    start_point      int        not null,
+    end_point        int        not null,
+    departure_time   timestamp  not null,
+    free_spots       int        not null,
+    is_deleted       tinyint(1) not null,
+    user_id          int        not null,
+    travel_status_id int        not null,
+    constraint travels_cities_id_fk
+        foreign key (start_point) references cities (id),
+    constraint travels_cities_id_fk2
+        foreign key (end_point) references cities (id),
+    constraint travels_travel_status_id_fk
+        foreign key (travel_status_id) references travel_status (id),
     constraint travels_users_user_id_fk
         foreign key (user_id) references users (user_id)
 );
 
-create table comments
+create table approved_passengers
 (
-    comment_id     int auto_increment
+    id        int auto_increment
         primary key,
-    content        varchar(20) not null,
-    is_allowed     tinyint(1)  not null,
-    is_not_allowed tinyint(1)  not null,
-    travel_id      int         not null,
-    constraint comments_travels_travel_id_fk
+    user_id   int not null,
+    travel_id int not null,
+    constraint approved_passengers_travels_travel_id_fk
+        foreign key (travel_id) references travels (travel_id),
+    constraint approved_passengers_users_user_id_fk
+        foreign key (user_id) references users (user_id)
+);
+
+create table pending_passengers
+(
+    id        int auto_increment
+        primary key,
+    user_id   int not null,
+    travel_id int not null,
+    constraint pending_passengers_travels_travel_id_fk
+        foreign key (travel_id) references travels (travel_id),
+    constraint pending_passengers_users_user_id_fk
+        foreign key (user_id) references users (user_id)
+);
+
+create table travel_preferences
+(
+    id               int auto_increment
+        primary key,
+    is_pet_allowed   tinyint       not null,
+    is_smoke_allowed tinyint       not null,
+    text             varchar(2000) null,
+    travel_id        int           not null,
+    constraint travel_preferences_travels_travel_id_fk
         foreign key (travel_id) references travels (travel_id)
+);
+
+create table user_status
+(
+    id          int auto_increment
+        primary key,
+    user_status int     not null,
+    is_deleted  tinyint not null,
+    is_blocked  tinyint not null,
+    is_admin    tinyint not null,
+    user_id     int     not null,
+    constraint user_status_users_user_id_fk
+        foreign key (user_id) references users (user_id)
 );
\ No newline at end of file
Index: CarPooling/src/main/java/org/example/carpooling/models/Feedback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CarPooling/src/main/java/org/example/carpooling/models/Feedback.java b/CarPooling/src/main/java/org/example/carpooling/models/Feedback.java
new file mode 100644
--- /dev/null	
+++ b/CarPooling/src/main/java/org/example/carpooling/models/Feedback.java	
@@ -0,0 +1,70 @@
+package org.example.carpooling.models;
+
+
+import jakarta.persistence.*;
+
+@Entity
+@Table(name = "feedbacks")
+public class Feedback {
+
+    @Id
+    @GeneratedValue( strategy = GenerationType.IDENTITY)
+    @Column(name = "id")
+    private int id;
+
+@Column (name = "from_user_id")
+private int fromUser;
+
+@Column( name = "to_user_id")
+private int toUser;
+
+@Column (name = "from_driver_to_passenger")
+private boolean isDriver;
+
+@Column (name = "rating")
+private int rating;
+
+
+    public Feedback() {
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public int getFromUser() {
+        return fromUser;
+    }
+
+    public void setFromUser(int fromUser) {
+        this.fromUser = fromUser;
+    }
+
+    public int getToUser() {
+        return toUser;
+    }
+
+    public void setToUser(int toUser) {
+        this.toUser = toUser;
+    }
+
+    public boolean isDriver() {
+        return isDriver;
+    }
+
+    public void setDriver(boolean driver) {
+        isDriver = driver;
+    }
+
+    public int getRating() {
+        return rating;
+    }
+
+    public void setRating(int rating) {
+        this.rating = rating;
+    }
+}
